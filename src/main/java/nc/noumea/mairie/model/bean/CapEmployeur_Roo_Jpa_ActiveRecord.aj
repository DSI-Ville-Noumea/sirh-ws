// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nc.noumea.mairie.model.bean;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import nc.noumea.mairie.model.bean.CapEmployeur;
import nc.noumea.mairie.model.bean.CapEmployeurPK;
import org.springframework.transaction.annotation.Transactional;

privileged aspect CapEmployeur_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext(unitName = "sirhPersistenceUnit")
    transient EntityManager CapEmployeur.entityManager;
    
    public static final EntityManager CapEmployeur.entityManager() {
        EntityManager em = new CapEmployeur().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long CapEmployeur.countCapEmployeurs() {
        return entityManager().createQuery("SELECT COUNT(o) FROM CapEmployeur o", Long.class).getSingleResult();
    }
    
    public static List<CapEmployeur> CapEmployeur.findAllCapEmployeurs() {
        return entityManager().createQuery("SELECT o FROM CapEmployeur o", CapEmployeur.class).getResultList();
    }
    
    public static CapEmployeur CapEmployeur.findCapEmployeur(CapEmployeurPK capEmployeurPk) {
        if (capEmployeurPk == null) return null;
        return entityManager().find(CapEmployeur.class, capEmployeurPk);
    }
    
    public static List<CapEmployeur> CapEmployeur.findCapEmployeurEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM CapEmployeur o", CapEmployeur.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void CapEmployeur.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void CapEmployeur.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            CapEmployeur attached = CapEmployeur.findCapEmployeur(this.capEmployeurPk);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void CapEmployeur.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void CapEmployeur.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public CapEmployeur CapEmployeur.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        CapEmployeur merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
