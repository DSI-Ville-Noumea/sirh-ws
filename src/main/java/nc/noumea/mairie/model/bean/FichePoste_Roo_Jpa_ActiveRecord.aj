// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nc.noumea.mairie.model.bean;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import nc.noumea.mairie.model.bean.FichePoste;
import org.springframework.transaction.annotation.Transactional;

privileged aspect FichePoste_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext(unitName = "sirhPersistenceUnit")
    transient EntityManager FichePoste.entityManager;
    
    public static final List<String> FichePoste.fieldNames4OrderClauseFilter = java.util.Arrays.asList("titrePoste", "lieuPoste", "budget", "opi", "nfa", "annee", "numFP", "missions", "statutFP", "budgete", "reglementaire", "service", "gradePoste", "activites", "competencesFDP", "niveauEtude", "avantagesNature", "delegations", "regimesIndemnitaires", "primePointageFP", "diplome", "ficheEmploiPrimaire", "ficheEmploiSecondaire", "superieurHierarchique", "remplace", "agent", "natureCredit");
    
    public static final EntityManager FichePoste.entityManager() {
        EntityManager em = new FichePoste().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long FichePoste.countFichePostes() {
        return entityManager().createQuery("SELECT COUNT(o) FROM FichePoste o", Long.class).getSingleResult();
    }
    
    public static List<FichePoste> FichePoste.findAllFichePostes() {
        return entityManager().createQuery("SELECT o FROM FichePoste o", FichePoste.class).getResultList();
    }
    
    public static List<FichePoste> FichePoste.findAllFichePostes(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM FichePoste o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, FichePoste.class).getResultList();
    }
    
    public static FichePoste FichePoste.findFichePoste(Integer idFichePoste) {
        if (idFichePoste == null) return null;
        return entityManager().find(FichePoste.class, idFichePoste);
    }
    
    public static List<FichePoste> FichePoste.findFichePosteEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM FichePoste o", FichePoste.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<FichePoste> FichePoste.findFichePosteEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM FichePoste o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, FichePoste.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void FichePoste.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void FichePoste.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            FichePoste attached = FichePoste.findFichePoste(this.idFichePoste);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void FichePoste.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void FichePoste.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public FichePoste FichePoste.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        FichePoste merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
