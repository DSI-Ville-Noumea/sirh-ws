// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nc.noumea.mairie.model.bean;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import nc.noumea.mairie.model.bean.CadreEmploi;
import org.springframework.transaction.annotation.Transactional;

privileged aspect CadreEmploi_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext(unitName = "sirhPersistenceUnit")
    transient EntityManager CadreEmploi.entityManager;
    
    public static final EntityManager CadreEmploi.entityManager() {
        EntityManager em = new CadreEmploi().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long CadreEmploi.countCadreEmplois() {
        return entityManager().createQuery("SELECT COUNT(o) FROM CadreEmploi o", Long.class).getSingleResult();
    }
    
    public static List<CadreEmploi> CadreEmploi.findAllCadreEmplois() {
        return entityManager().createQuery("SELECT o FROM CadreEmploi o", CadreEmploi.class).getResultList();
    }
    
    public static CadreEmploi CadreEmploi.findCadreEmploi(Integer idCadreEmploi) {
        if (idCadreEmploi == null) return null;
        return entityManager().find(CadreEmploi.class, idCadreEmploi);
    }
    
    public static List<CadreEmploi> CadreEmploi.findCadreEmploiEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM CadreEmploi o", CadreEmploi.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void CadreEmploi.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void CadreEmploi.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            CadreEmploi attached = CadreEmploi.findCadreEmploi(this.idCadreEmploi);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void CadreEmploi.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void CadreEmploi.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public CadreEmploi CadreEmploi.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        CadreEmploi merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
