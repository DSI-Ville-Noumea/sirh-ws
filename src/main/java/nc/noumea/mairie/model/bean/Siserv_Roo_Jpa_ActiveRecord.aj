// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nc.noumea.mairie.model.bean;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import nc.noumea.mairie.model.bean.Siserv;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Siserv_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext(unitName = "sirhPersistenceUnit")
    transient EntityManager Siserv.entityManager;
    
    public static final EntityManager Siserv.entityManager() {
        EntityManager em = new Siserv().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Siserv.countSiservs() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Siserv o", Long.class).getSingleResult();
    }
    
    public static List<Siserv> Siserv.findAllSiservs() {
        return entityManager().createQuery("SELECT o FROM Siserv o", Siserv.class).getResultList();
    }
    
    public static Siserv Siserv.findSiserv(String servi) {
        if (servi == null || servi.length() == 0) return null;
        return entityManager().find(Siserv.class, servi);
    }
    
    public static List<Siserv> Siserv.findSiservEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Siserv o", Siserv.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Siserv.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Siserv.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Siserv attached = Siserv.findSiserv(this.servi);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Siserv.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Siserv.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Siserv Siserv.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Siserv merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
