// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nc.noumea.mairie.model.bean;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import nc.noumea.mairie.model.bean.Spfili;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Spfili_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext(unitName = "sirhPersistenceUnit")
    transient EntityManager Spfili.entityManager;
    
    public static final EntityManager Spfili.entityManager() {
        EntityManager em = new Spfili().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Spfili.countSpfilis() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Spfili o", Long.class).getSingleResult();
    }
    
    public static List<Spfili> Spfili.findAllSpfilis() {
        return entityManager().createQuery("SELECT o FROM Spfili o", Spfili.class).getResultList();
    }
    
    public static Spfili Spfili.findSpfili(String cdfili) {
        if (cdfili == null || cdfili.length() == 0) return null;
        return entityManager().find(Spfili.class, cdfili);
    }
    
    public static List<Spfili> Spfili.findSpfiliEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Spfili o", Spfili.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Spfili.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Spfili.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Spfili attached = Spfili.findSpfili(this.cdfili);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Spfili.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Spfili.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Spfili Spfili.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Spfili merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
