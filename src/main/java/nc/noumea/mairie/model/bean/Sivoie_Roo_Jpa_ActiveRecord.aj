// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nc.noumea.mairie.model.bean;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import nc.noumea.mairie.model.bean.Sivoie;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Sivoie_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Sivoie.entityManager;
    
    public static final EntityManager Sivoie.entityManager() {
        EntityManager em = new Sivoie().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Sivoie.countSivoies() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Sivoie o", Long.class).getSingleResult();
    }
    
    public static List<Sivoie> Sivoie.findAllSivoies() {
        return entityManager().createQuery("SELECT o FROM Sivoie o", Sivoie.class).getResultList();
    }
    
    public static Sivoie Sivoie.findSivoie(Integer idVoie) {
        if (idVoie == null) return null;
        return entityManager().find(Sivoie.class, idVoie);
    }
    
    public static List<Sivoie> Sivoie.findSivoieEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Sivoie o", Sivoie.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Sivoie.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Sivoie.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Sivoie attached = Sivoie.findSivoie(this.idVoie);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Sivoie.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Sivoie.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Sivoie Sivoie.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Sivoie merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
