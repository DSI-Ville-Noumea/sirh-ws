// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nc.noumea.mairie.model.bean;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import nc.noumea.mairie.model.bean.AvancementDetache;
import org.springframework.transaction.annotation.Transactional;

privileged aspect AvancementDetache_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext(unitName = "sirhPersistenceUnit")
    transient EntityManager AvancementDetache.entityManager;
    
    public static final List<String> AvancementDetache.fieldNames4OrderClauseFilter = java.util.Arrays.asList("agent", "idModifAvancement", "etat", "codeCategporie", "filiere", "grade", "gradeDate", "gradeNouveau", "dateAvctMoy", "accAnnee", "accMois", "accJour", "anneeAvancement", "regularisation", "nouvAccAnnee", "nouvAccMois", "nouvAccJour", "agentVDN");
    
    public static final EntityManager AvancementDetache.entityManager() {
        EntityManager em = new AvancementDetache().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long AvancementDetache.countAvancementDetaches() {
        return entityManager().createQuery("SELECT COUNT(o) FROM AvancementDetache o", Long.class).getSingleResult();
    }
    
    public static List<AvancementDetache> AvancementDetache.findAllAvancementDetaches() {
        return entityManager().createQuery("SELECT o FROM AvancementDetache o", AvancementDetache.class).getResultList();
    }
    
    public static List<AvancementDetache> AvancementDetache.findAllAvancementDetaches(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM AvancementDetache o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, AvancementDetache.class).getResultList();
    }
    
    public static AvancementDetache AvancementDetache.findAvancementDetache(Integer idAvct) {
        if (idAvct == null) return null;
        return entityManager().find(AvancementDetache.class, idAvct);
    }
    
    public static List<AvancementDetache> AvancementDetache.findAvancementDetacheEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM AvancementDetache o", AvancementDetache.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<AvancementDetache> AvancementDetache.findAvancementDetacheEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM AvancementDetache o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, AvancementDetache.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void AvancementDetache.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void AvancementDetache.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            AvancementDetache attached = AvancementDetache.findAvancementDetache(this.idAvct);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void AvancementDetache.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void AvancementDetache.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public AvancementDetache AvancementDetache.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        AvancementDetache merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
