// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nc.noumea.mairie.web.controller;

import java.util.List;
import nc.noumea.mairie.model.bean.Agent;
import nc.noumea.mairie.web.controller.AgentController;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect AgentController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{idAgent}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AgentController.showJson(@PathVariable("idAgent") Integer idAgent) {
        Agent agent = Agent.findAgent(idAgent);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (agent == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(agent.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AgentController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Agent> result = Agent.findAllAgents();
        return new ResponseEntity<String>(Agent.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> AgentController.createFromJson(@RequestBody String json) {
        Agent agent = Agent.fromJsonToAgent(json);
        agent.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> AgentController.createFromJsonArray(@RequestBody String json) {
        for (Agent agent: Agent.fromJsonArrayToAgents(json)) {
            agent.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{idAgent}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> AgentController.updateFromJson(@RequestBody String json, @PathVariable("idAgent") Integer idAgent) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Agent agent = Agent.fromJsonToAgent(json);
        if (agent.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{idAgent}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> AgentController.deleteFromJson(@PathVariable("idAgent") Integer idAgent) {
        Agent agent = Agent.findAgent(idAgent);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (agent == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        agent.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
